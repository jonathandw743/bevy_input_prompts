use std::{
    env, fs,
    path::{Path, PathBuf},
};

use fs_extra::dir::CopyOptions;

#[allow(non_upper_case_globals, non_snake_case)]
pub mod directory_representation {
    include!("../generated/directory_representation.rs");
}

pub mod kenney;
pub mod not_found;
pub mod product_ids;
pub mod vendor_ids;
pub mod xelu;

fn copy_assets<I: IntoIterator<Item = P>, P: AsRef<Path>>(asset_dirs: I) {
    let addon_asset_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("assets");
    let asset_paths = asset_dirs
        .into_iter()
        .map(|dir| addon_asset_dir.join(dir))
        .collect::<Vec<_>>();
    let this_asset_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("assets");
    fs::create_dir_all(&this_asset_dir).expect("creating asset directory failed");
    fs_extra::copy_items(
        &asset_paths,
        this_asset_dir,
        &CopyOptions {
            overwrite: false,
            skip_exist: true,
            content_only: false,
            depth: 0,
            ..Default::default()
        },
    )
    .expect("copying assets failed");
}

pub const ASSET_DIRS: [&'static str; 1] = ["bevy_input_prompts/not_found"];

/// copy assets into the assets directory for just using basic, autogenerated input prompts
pub fn build_basic() {
    copy_assets(ASSET_DIRS);
}

/// copy assets into the assets directory for just using Xelu's input prompts
pub fn build_xelu() {
    copy_assets(ASSET_DIRS);
    copy_assets(xelu::ASSET_DIRS);
}

/// copy assets into the assets directory for just using Kenney's input prompts
pub fn build_kenney() {
    copy_assets(ASSET_DIRS);
    copy_assets(kenney::ASSET_DIRS);
}

/// copy assets into the assets directory for just using any input prompts
pub fn build_all() {
    copy_assets(ASSET_DIRS);
    copy_assets(xelu::ASSET_DIRS);
    copy_assets(kenney::ASSET_DIRS);
}